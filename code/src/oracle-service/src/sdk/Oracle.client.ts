/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.6.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, ExecuteMsg, QueryMsg, Addr, AdminResponse, OracleDataResponse, OraclePubkeyResponse } from "./Oracle.types";
export interface OracleReadOnlyInterface {
  contractAddress: string;
  getOracleData: () => Promise<OracleDataResponse>;
  getOraclePubkey: () => Promise<OraclePubkeyResponse>;
  getAdmin: () => Promise<AdminResponse>;
}
export class OracleQueryClient implements OracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getOracleData = this.getOracleData.bind(this);
    this.getOraclePubkey = this.getOraclePubkey.bind(this);
    this.getAdmin = this.getAdmin.bind(this);
  }
  getOracleData = async (): Promise<OracleDataResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_oracle_data: {}
    });
  };
  getOraclePubkey = async (): Promise<OraclePubkeyResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_oracle_pubkey: {}
    });
  };
  getAdmin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_admin: {}
    });
  };
}
export interface OracleInterface extends OracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  send: ({
    recipient
  }: {
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  oracleDataUpdate: ({
    data,
    signature
  }: {
    data: string;
    signature: Binary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOracle: ({
    newKeyType,
    newPubkey
  }: {
    newKeyType?: string;
    newPubkey: Binary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OracleClient extends OracleQueryClient implements OracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.send = this.send.bind(this);
    this.oracleDataUpdate = this.oracleDataUpdate.bind(this);
    this.updateOracle = this.updateOracle.bind(this);
  }
  send = async ({
    recipient
  }: {
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send: {
        recipient
      }
    }, fee, memo, _funds);
  };
  oracleDataUpdate = async ({
    data,
    signature
  }: {
    data: string;
    signature: Binary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      oracle_data_update: {
        data,
        signature
      }
    }, fee, memo, _funds);
  };
  updateOracle = async ({
    newKeyType,
    newPubkey
  }: {
    newKeyType?: string;
    newPubkey: Binary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_oracle: {
        new_key_type: newKeyType,
        new_pubkey: newPubkey
      }
    }, fee, memo, _funds);
  };
}